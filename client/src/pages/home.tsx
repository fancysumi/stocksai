import { useRef, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { AppHeader } from "@/components/app-header";
import { MarketOverview } from "@/components/market-overview";
import { RecommendationCard } from "@/components/recommendation-card";
import { PortfolioSummary } from "@/components/portfolio-summary";
import { CashOverview } from "@/components/cash-overview";
import { ChatInterface } from "@/components/chat-interface";
import { BottomNavigation } from "@/components/bottom-navigation";
import { Button } from "@/components/ui/button";
import { RefreshCw, ChevronDown } from "lucide-react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { usePullToRefresh } from "@/hooks/use-pull-to-refresh";

interface Recommendation {
  id: number;
  stockSymbol: string;
  action: string;
  confidence: string;
  reason: string;
  targetPrice?: string;
  allocation?: string;
  type: string;
}

interface Stock {
  symbol: string;
  name: string;
  price: string;
  change: string;
  changePercent: string;
}

export default function Home() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const containerRef = useRef<HTMLDivElement>(null);

  const { data: recommendations, isLoading: recommendationsLoading } = useQuery<Recommendation[]>({
    queryKey: ["/api/recommendations"],
  });

  const { data: stocks, isLoading: stocksLoading } = useQuery<Stock[]>({
    queryKey: ["/api/stocks"],
  });

  const refreshRecommendationsMutation = useMutation({
    mutationFn: async () => {
      const response = await apiRequest("POST", "/api/recommendations/refresh", {});
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Recommendations Updated",
        description: "Fresh recommendations generated by Claude.",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/recommendations"] });
      queryClient.invalidateQueries({ queryKey: ["/api/market"] });
      queryClient.invalidateQueries({ queryKey: ["/api/portfolio/summary"] });
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to refresh recommendations.",
        variant: "destructive",
      });
    },
  });

  const {
    isPulling,
    pullDistance,
    isRefreshing,
    shouldShowIndicator,
    isReadyToRefresh,
    bindEvents
  } = usePullToRefresh({
    onRefresh: async () => {
      await refreshRecommendationsMutation.mutateAsync();
    },
    threshold: 80,
    disabled: refreshRecommendationsMutation.isPending
  });

  useEffect(() => {
    const container = containerRef.current;
    if (container) {
      return bindEvents(container);
    }
  }, [bindEvents]);

  const getStockForRecommendation = (symbol: string): Stock | undefined => {
    return stocks?.find(stock => stock.symbol === symbol);
  };

  return (
    <div ref={containerRef} className="min-h-screen bg-gray-50 touch-pan-y">
      <AppHeader />
      
      {/* Pull to Refresh Indicator */}
      {shouldShowIndicator && (
        <div 
          className={`pull-refresh ${shouldShowIndicator ? 'active' : ''} transition-all duration-300`}
          style={{ 
            transform: `translateY(${Math.min(pullDistance - 20, 40)}px)`,
            opacity: Math.min(pullDistance / 60, 1)
          }}
        >
          <div className={`flex flex-col items-center ${isReadyToRefresh ? 'text-success' : 'text-muted'}`}>
            <ChevronDown 
              size={24} 
              className={`transition-transform duration-200 ${isReadyToRefresh ? 'rotate-180' : ''}`}
            />
            <p className="text-xs font-medium mt-1">
              {isReadyToRefresh ? 'Release to refresh' : 'Pull to refresh'}
            </p>
          </div>
        </div>
      )}
      
      <main className="pb-20" style={{ transform: `translateY(${Math.min(pullDistance * 0.3, 30)}px)` }}>
        {/* Daily Recommendations Section */}
        <section className="px-4 py-6 mobile-spacing">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-gray-900">Daily Recommendations</h2>
            <div className="flex items-center space-x-3">
              <div className="flex items-center space-x-2 text-sm text-muted">
                <div className="w-2 h-2 bg-success rounded-full animate-pulse"></div>
                <span className="font-medium">Live</span>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => refreshRecommendationsMutation.mutate()}
                disabled={refreshRecommendationsMutation.isPending || isRefreshing}
                className="ml-2 touch-target"
              >
                <RefreshCw className={`h-5 w-5 ${(refreshRecommendationsMutation.isPending || isRefreshing) ? 'animate-spin' : ''}`} />
              </Button>
            </div>
          </div>
          
          {/* Market Overview */}
          <MarketOverview />

          {/* Cash Overview */}
          <div className="mb-6">
            <CashOverview />
          </div>

          {/* AI Recommendation Cards */}
          {recommendationsLoading && (
            <div className="space-y-4">
              {[1, 2].map((i) => (
                <div key={i} className="bg-white rounded-xl p-4 animate-pulse">
                  <div className="h-4 bg-gray-200 rounded w-1/3 mb-3"></div>
                  <div className="h-16 bg-gray-200 rounded mb-3"></div>
                  <div className="h-20 bg-gray-200 rounded mb-3"></div>
                  <div className="flex space-x-2">
                    <div className="h-10 bg-gray-200 rounded flex-1"></div>
                    <div className="h-10 bg-gray-200 rounded flex-1"></div>
                  </div>
                </div>
              ))}
            </div>
          )}

          {recommendations && !recommendationsLoading && (
            <div className="space-y-4">
              {recommendations.length === 0 && (
                <div className="bg-white rounded-xl p-6 text-center">
                  <p className="text-muted mb-2">No recommendations available</p>
                  <Button
                    onClick={() => refreshRecommendationsMutation.mutate()}
                    disabled={refreshRecommendationsMutation.isPending}
                  >
                    Generate Recommendations
                  </Button>
                </div>
              )}
              {recommendations.map((recommendation) => {
                const stock = getStockForRecommendation(recommendation.stockSymbol);
                if (!stock) return null;
                
                return (
                  <RecommendationCard
                    key={recommendation.id}
                    recommendation={recommendation}
                    stock={stock}
                  />
                );
              })}
            </div>
          )}
        </section>

        {/* Portfolio Overview Section */}
        <section className="px-4 py-6 bg-white">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold text-gray-900">Portfolio</h2>
            <Button variant="ghost" size="sm">
              View All
            </Button>
          </div>
          <PortfolioSummary />
        </section>
      </main>

      <ChatInterface />
      <BottomNavigation />
    </div>
  );
}
